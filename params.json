{"name":"RestBus","tagline":"Easy, Service Oriented, Asynchronous Messaging and Queueing for .Net","body":"RestBus enables you to consume your WebAPI and ServiceStack service endpoints via RabbitMQ.  \r\nWith RestBus, queuing or sending a message asynchronously is as simple as:\r\n\r\n```csharp\r\nvar amqpUrl = \"amqp://localhost:5672\"; //AMQP URI for RabbitMQ server\r\nvar serviceName = \"samba\"; //The unique identifier for the target service\r\n\r\nvar client = new RestBusClient(new BasicMessageMapper(amqpUrl, serviceName));\r\n\r\n//Call the /hello/random endpoint\r\nvar response = await client.GetAsync(\"/hello/random\");\r\n```\r\n\r\nDoes that look familiar?  \r\nIf you're conversant with <a href=\"http://msdn.microsoft.com/en-us/library/system.net.http.httpclient(v=vs.110).aspx\" target=\"_blank\">.NET's HttpClient</a> class, you'll be right at home with the `RestBusClient` class. In fact they both derive from the same base class.  \r\n\r\nThe `/hello/random` endpoint is an ordinary web service endpoint in an ASP.NET Core, Web API or ServiceStack service. RestBus routes the request over RabbitMQ, invokes the endpoint and returns the response, over RabbitMQ too, without ever hitting the HTTP transport.\r\n\r\n##Why do I need this?##\r\n\r\nRestBus is a great library for using RabbitMQ in .NET.  \r\nFor more reasons, see <a href=\"https://github.com/tenor/RestBus/wiki/Why-RestBus%3F\" target=\"_blank\">Why RestBus?</a>\r\n\r\n##Getting Started##\r\n\r\n- <a href=\"https://github.com/tenor/RestBus/wiki/ASP.NET-Core-service-(RabbitMQ-callable)\" target=\"_blank\">Using RestBus in an ASP.NET Core Project</a> \r\n- <a href=\"https://github.com/tenor/RestBus/wiki/Web-API-service-(RabbitMQ-callable)\" target=\"_blank\">Using RestBus in a Web API service</a>  \r\n- <a href=\"https://github.com/tenor/RestBus/wiki/Self-hosting-Web-API-service-(RabbitMQ-callable)\" target=\"_blank\">Using RestBus in a Self-Hosted Web API service</a>  \r\n- <a href=\"https://github.com/tenor/RestBus/wiki/ASP.NET-hosted-ServiceStack-Service-(RabbitMQ-callable)\" target=\"_blank\">Using RestBus in an ASP.NET hosted ServiceStack service</a>  \r\n- <a href=\"https://github.com/tenor/RestBus/wiki/Self-hosting-ServiceStack-service-(RabbitMQ-callable)\" target=\"_blank\">Using RestBus in a Self-Hosted ServiceStack service</a>  \r\n- Queuing Messages\r\n \r\n##Features##\r\n###Zero Configuration###\r\nYou don't need to configure the RabbitMQ server. RestBus automatically creates queues and exchanges as needed.\r\n\r\n###Use your Existing Web Services###\r\nYour web services can still be consumed via HTTP while supporting RabbitMQ calls.\r\n\r\n- If you are already making calls with the `HttpClient` class, simply switch the client to a `RestBusClient` class and your messages will be routed through RabbitMQ.\r\n\r\n###Horizontal scaling###\r\nScaling your services horizontally is as easy as launching new instances.\r\n\r\n###It's Fast###\r\nRestBus compares very favorably with other messaging libraries.\r\n\r\n![One Way RPC Test Results](https://raw.githubusercontent.com/tenor/RestBus.Benchmarks/master/images/RabbitMQ/rpc_throughput_20_threads.png)\r\n\r\nFor more details, see <a href=\"https://github.com/tenor/RestBus.Benchmarks\" target=\"_blank\">the benchmarks project</a>.\r\n\r\n###Customizable###\r\nRoll your own MessageMapper class for custom messaging behavior.\r\n\r\n##How it works##\r\n\r\nSee <a href=\"https://github.com/tenor/RestBus/wiki/How-it-works\" target=\"_blank\">How It Works</a> \r\n\r\n##Advanced Scenarios##\r\n- Specifying options for individual messages (Timeout, Cookies, Headers)\r\n- Sticky messaging\r\n\r\n##License##\r\nApache License, Version 2.0","google":"UA-46923082-1","note":"Don't delete this file! It's used internally to help with page regeneration."}